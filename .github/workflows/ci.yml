name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
#  rustfmt:
#    name: Rustfmt
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          override: true
#          components: rustfmt
#      - uses: actions-rs/cargo@v1
#        with:
#          command: fmt
#          args: --all -- --check
#
#  clippy:
#    name: Clippy
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          override: true
#          components: clippy
#      - uses: actions-rs/clippy-check@v1
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          args: -- -D warnings
#
#  black:
#    name: Black
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: psf/black@stable
#        with:
#          options: "--check --verbose"
#          src: "./python/watchfs"
#
#  flake8-lint:
#    runs-on: ubuntu-latest
#    name: Lint
#    steps:
#      - uses: actions/checkout@v2
#      - name: flake8 Lint
#        uses: py-actions/flake8@v1

  build_test_deploy:
    name: python${{ matrix.python-version }}-${{ matrix.platform.python-architecture }} ${{ matrix.platform.os }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false # If one platform fails, allow the rest to keep testing.
      matrix:
        rust: [ "stable", "nightly" ]
        # 3.6 does not allow asyncio.createtask
        python-version: [ "3.7", "3.8", "3.9", "3.10"]
        platform:
          [
            {
              os: "macos-latest",
              python-architecture: "x64",
              rust-target: "x86_64-apple-darwin",
              protoc: "protoc-3.19.0-osx-x86_64.zip"
            },
            {
              os: "ubuntu-latest",
              python-architecture: "x64",
              rust-target: "x86_64-unknown-linux-gnu",
              protoc: "protoc-3.19.0-linux-x86_64.zip"
            },
            {
              os: "windows-latest",
              python-architecture: "x64",
              rust-target: "x86_64-pc-windows-msvc",
              protoc: "protoc-3.19.0-win64.zip"
            },
            {
              os: "windows-latest",
              python-architecture: "x86",
              rust-target: "i686-pc-windows-msvc",
              protoc: "protoc-3.19.0-win32.zip"
            },
          ]
    steps:
      - run: find .

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture:  ${{ matrix.platform.python-architecture }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Rust cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ matrix.python-version }}-${{ matrix.platform.python-architecture }}-${{ matrix.platform.os }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.platform.rust-target }}
          profile: minimal
          default: true
          components: rust-src, llvm-tools-preview

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Run rust coverage
        if: matrix.platform.os == 'ubuntu-latest' && matrix.python-version == '3.8' && matrix.rust == 'nightly'
        run: |
          curl -LsSf https://github.com/taiki-e/cargo-llvm-cov/releases/latest/download/cargo-llvm-cov-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C ~/.cargo/bin
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload rust coverage
        if: matrix.platform.os == 'ubuntu-latest' && matrix.python-version == '3.8' && matrix.rust == 'nightly'
        uses: codecov/codecov-action@v1
        with:
          files: lcov.info

      - name: Install python dependencies
        run: |
          pip install -r requirements-test.txt
          pip install -r requirements-dev.txt

      - name: Build proto python file
        run: python build_scripts/run_protoc.py --url="https://github.com/protocolbuffers/protobuf/releases/download/v3.19.0/${{ matrix.platform.protoc }}"

      - name: Maturin build and pip install
        run: |
          maturin build --release
          pip install --find-links=./target/wheels/ watchfs

      - name: Run python tests
        run: pytest

      - name: Run python coverage
        if: matrix.platform.os == 'ubuntu-latest' && matrix.python-version == '3.8' && matrix.rust == 'nightly'
        run: |
          site_packages_dir=$(pip show watchfs | grep "Location" | sed 's/Location: //')
          echo "site packages dir: ${site_packages_dir}"
          coverage run --rcfile=./python/.coveragerc --source="${site_packages_dir}/watchfs" -m pytest
          coverage report --rcfile=./python/.coveragerc
          coverage xml --rcfile=./python/.coveragerc

      - name: Upload python coverage
        if: matrix.platform.os == 'ubuntu-latest' && matrix.python-version == '3.8' && matrix.rust == 'nightly'
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true

      - name: Run twine check
        run: twine check target/wheels/*

      - name: Upload to pypi
        run: twine upload  -r testpypi target/wheels/*.whl --verbose --skip-existing
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}

    env:
      CARGO_TERM_VERBOSE: true
      CARGO_BUILD_TARGET: ${{ matrix.platform.rust-target }}
      RUST_BACKTRACE: 1
#      RUSTFLAGS: "-D warnings"
#      RUSTDOCFLAGS: "-D warnings"