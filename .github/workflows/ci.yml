name: watchfs ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test_python:
    name: Python test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'

      - name: Build proto python file
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v3.18.1/protoc-3.18.1-linux-x86_64.zip
          mkdir protoc
          unzip protoc-3.18.1-linux-x86_64.zip -d protoc
          protoc/bin/protoc -I=src --python_out=./python/watchfs/ ./src/watchfs.proto

      - name: Install python dependencies
        run: |
          pip install -r requirements-test.txt
          pip install maturin

      - name: Build and install rust watchfs
        run: |
          maturin build --release
          pip install --find-links=./target/wheels/ watchfs


      - name:  Generate python coverage report
        run: |
          site_packages_dir=$(pip show watchfs | grep "Location" | sed 's/Location: //')
          echo "site packages dir: ${site_packages_dir}"
          coverage run --rcfile=./python/.coveragerc --source="${site_packages_dir}/watchfs" -m pytest
          coverage report --rcfile=./python/.coveragerc
          coverage xml --rcfile=./python/.coveragerc

      - name: Upload python coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos


#  rust_check:
#    name: Rust check
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v2
#
#      - name: Install stable toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: stable
#          override: true
#
#      - name: Run cargo check
#        uses: actions-rs/cargo@v1
#        with:
#          command: check
#
#
#  rust_test:
#    name: Rust test
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v2
#
#      - name: Install stable toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: stable
#          override: true
#
#      - name: Run cargo test
#        uses: actions-rs/cargo@v1
#        with:
#          command: test
#
#  rust_lint:
#    name: Rust lint
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v2
#
#      - name: Install stable toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: stable
#          override: true
#          components: rustfmt, clippy
#
#      - name: Run cargo fmt
#        uses: actions-rs/cargo@v1
#        with:
#          command: fmt
#          args: --all -- --check
#
#      - name: Run cargo clippy
#        uses: actions-rs/cargo@v1
#        with:
#          command: clippy
#          args: -- -D warnings
#


#
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: psf/black@stable
#        with:
#          options: "--check --verbose"
#          src: "./src"

  rustcoverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: coverage-cargo-${{ hashFiles('**/Cargo.toml') }}
        continue-on-error: true
      - name: install cargo-llvm-cov
        run: |
          wget https://github.com/taiki-e/cargo-llvm-cov/releases/download/v${CARGO_LLVM_COV_VERSION}/cargo-llvm-cov-x86_64-unknown-linux-gnu.tar.gz -qO- | tar -xzvf -
          mv cargo-llvm-cov ~/.cargo/bin
        env:
          CARGO_LLVM_COV_VERSION: 0.1.5
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          profile: minimal
          components: llvm-tools-preview
      - run: |
          cargo llvm-cov clean --workspace
          cargo llvm-cov --package $ALL_PACKAGES --no-report
          cargo llvm-cov --package $ALL_PACKAGES --no-report --features abi3
          cargo llvm-cov --package $ALL_PACKAGES --no-report --features macros num-bigint num-complex hashbrown indexmap serde multiple-pymethods eyre anyhow
          cargo llvm-cov --package $ALL_PACKAGES --no-run --lcov --output-path coverage.lcov
        env:
          ALL_PACKAGES: pyo3 pyo3-build-config pyo3-macros-backend pyo3-macros
      - uses: codecov/codecov-action@v1
        with:
          file: coverage.lcov